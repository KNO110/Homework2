using System;

using System;
using System.Collections.Generic;
/// powered by Ak1ne
public class InvAgeEx : Exception
{
    public InvAgeEx(string message) : base(message) { }
}

public class InvNameEx : Exception
{
    public InvNameEx(string message) : base(message) { }
}

public class Student
{
    private string lastName;
    private string firstName;
    private string middleName;
    private DateTime dateOfBirth;
    private Address homeAddress;
    private string phoneNumber;
    private List<int> homeworkGrades;
    private List<int> finalWorkGrades;
    private List<int> examGrades;

    public Student(string lastName, string firstName, string middleName, DateTime dateOfBirth, Address homeAddress, string phoneNumber)
    {
        this.lastName = lastName;
        this.firstName = firstName;
        this.middleName = middleName;
        this.dateOfBirth = dateOfBirth;
        this.homeAddress = homeAddress;
        this.phoneNumber = phoneNumber;
        this.homeworkGrades = RandomGrades();
        this.finalWorkGrades = RandomGrades();
        this.examGrades = RandomGrades();
    }

    public string LastName
    {
        get { return lastName; }
        set { lastName = value; }
    }

    public string FirstName
    {
        get { return firstName; }
        set { firstName = value; }
    }

    public string MiddleName
    {
        get { return middleName; }
        set { middleName = value; }
    }

    public DateTime DateOfBirth
    {
        get { return dateOfBirth; }
        set { dateOfBirth = value; }
    }

    public Address HomeAddress
    {
        get { return homeAddress; }
        set { homeAddress = value; }
    }

    public string PhoneNumber
    {
        get { return phoneNumber; }
        set { phoneNumber = value; }
    }

    public List<int> HomeworkGrades
    {
        get { return homeworkGrades; }
    }

    public List<int> FinalWorkGrades
    {
        get { return finalWorkGrades; }
    }

    public List<int> ExamGrades
    {
        get { return examGrades; }
    }

    public void PrintStudentInfo()
    {
        Console.WriteLine($"Фамилия: {lastName}");
        Console.WriteLine($"Имя: {firstName}");
        Console.WriteLine($"Отчество: {middleName}");
        Console.WriteLine($"Дата рождения: {dateOfBirth:dd.MM.yyyy}");
        Console.WriteLine("Домашний адрес:");
        Console.WriteLine($"  Улица: {homeAddress.Street}");
        Console.WriteLine($"  Город: {homeAddress.City}");
        Console.WriteLine($"  Почтовый индекс: {homeAddress.Postleitzahl}");
        Console.WriteLine($"Телефонный номер: {phoneNumber}");

        Console.WriteLine("Оценки по дз:");
        foreach (var grade in homeworkGrades)
        {
            Console.Write($"{grade} ");
        }
        Console.WriteLine();

        Console.WriteLine("Оценки по итоговым работам:");
        foreach (var grade in finalWorkGrades)
        {
            Console.Write($"{grade} ");
        }
        Console.WriteLine();

        Console.WriteLine("Оценки по экзаменам.___.:");
        foreach (var grade in examGrades)
        {
            Console.Write($"{grade} ");
        }
        Console.WriteLine();
    }

    private List<int> RandomGrades()
    {
        List<int> grades = new List<int>();
        Random random = new Random();
        for (int i = 0; i < 5; i++) // Генерируем 5 оценочек
        {
            grades.Add(random.Next(1, 13)); // Рандомная оценка от 1 до 12
        }
        return grades;
    }
}

public class Address
{
    public string Street { get; set; }
    public string City { get; set; }
    public string Postleitzahl { get; set; } /// Postleitzahl это индекс на немецком, ну типо 65503 и тд

    public Address(string street, string city, string postalCode)
    {
        Street = street;
        City = city;
        Postleitzahl = postalCode;
    }
}

public class Group
{
    private List<Student> students;

    public Group()
    {
        students = new List<Student>();
    }
    /// powered by Ak1ne
    public void AddStudent(Student student)
    {
        students.Add(student);
    }

    public void PrintStudents()
    {
        foreach (var student in students)
        {
            student.PrintStudentInfo();
            Console.WriteLine();
        }
    }
}

public class GroupManager
{
    private Dictionary<string, Group> groups;

    public GroupManager()
    {
        groups = new Dictionary<string, Group>();
    }

    public void CreateGroup(string groupName)
    {
        if (!groups.ContainsKey(groupName))
        {
            groups[groupName] = new Group();
            Console.WriteLine($"Группа с названием \"{groupName}\" успешно создана.");
        }
        else
        {
            Console.WriteLine("Группа с таким названием уже есть....бош");
        }
    }

    public void AddStudentToGroup(string groupName, Student student)
    {
        if (groups.ContainsKey(groupName))
        {
            Group group = groups[groupName];
            group.AddStudent(student);
            Console.WriteLine($"Студент успешно насильно добавлен в группу \"{groupName}\".");
        }
        else
        {
            Console.WriteLine($"Группа с названием \"{groupName}\" не найдена. Или херово искали");
        }
    }

    public void PrintStudentsInGroup(string groupName)
    {
        if (groups.ContainsKey(groupName))
        {
            Console.WriteLine($"Список студентов в группе \"{groupName}\":");
            Group group = groups[groupName];
            group.PrintStudents();
        }
        else
        {
            Console.WriteLine($"Группа с названием \"{groupName}\" не найдена:(");
        }
    }
}

public class Program
{
    public class StudentKeyListener
    {
        private GroupManager groupManager;

        public StudentKeyListener()
        {
            groupManager = new GroupManager();
        }

        public static void Main()
        {
            StudentKeyListener keyListener = new StudentKeyListener();
            keyListener.Listen();
        }

        public void Listen()
        {
            Console.CursorVisible = false;
            int selectedItem = 0;
            string[] menuItems = { "1) Создать группу", "2) Добавить студента в группу", "3) Вывести всех студентов в группе", "4) Выйти за дверь" };

            while (true)
            {
                Console.Clear();
                for (int i = 0; i < menuItems.Length; i++)
                {
                    if (i == selectedItem)
                    {
                        Console.BackgroundColor = ConsoleColor.White;
                        Console.ForegroundColor = ConsoleColor.Black;
                    }
                    Console.WriteLine(menuItems[i]);
                    Console.ResetColor();
                }

                var key = Console.ReadKey(true).Key;
                switch (key)
                {
                    case ConsoleKey.DownArrow:
                        selectedItem = (selectedItem + 1) % menuItems.Length;
                        break;
                    case ConsoleKey.UpArrow:
                        selectedItem = (selectedItem - 1 + menuItems.Length) % menuItems.Length;
                        break;
                    case ConsoleKey.Enter:
                        Console.Clear();
                        Console.WriteLine($"Выбрано действие: {menuItems[selectedItem]} \n");
                        PerformAction(selectedItem + 1);
                        Console.WriteLine("Нажмите любую клавишу для продолжения...");
                        Console.ReadKey();
                        break;
                }
            }
        }

        private void PerformAction(int action)
        {
            switch (action)
            {
                case 1: // Создать группу
                    Console.Write("Введите название группы: ");
                    string groupName = Console.ReadLine();
                    groupManager.CreateGroup(groupName);
                    break;

                case 2: // Добавить студента в группу
                    Console.Write("Введите название группы: ");
                    groupName = Console.ReadLine();

                    Console.Write("Введите фамилию студента: ");
                    string lastName = Console.ReadLine();

                    Console.Write("Введите имя студента: ");
                    string firstName = Console.ReadLine();

                    Console.Write("Введите отчество студента: ");
                    string middleName = Console.ReadLine();

                    Console.Write("Введите дату рождения студента (гггг-мм-дд): ");
                    if (DateTime.TryParse(Console.ReadLine(), out DateTime dateOfBirth))
                    {
                        Console.Write("Введите улицу студента: ");
                        string street = Console.ReadLine();

                        Console.Write("Введите город студента: ");
                        string city = Console.ReadLine();

                        Console.Write("Введите почтовый индекс домашнего адреса студента: ");
                        string postalCode = Console.ReadLine();

                        Address homeAddress = new Address(street, city, postalCode);

                        Console.Write("Введите телефонный номер студента: ");
                        string phoneNumber = Console.ReadLine();

                        Student s = new Student(lastName, firstName, middleName, dateOfBirth, homeAddress, phoneNumber);

                        groupManager.AddStudentToGroup(groupName, s);
                    }
                    else
                    {
                        Console.WriteLine("Неверный формат даты рождения.");
                    }
                    break;

                case 3: 
                    Console.Write("Введите название группы: ");
                    groupName = Console.ReadLine();
                    groupManager.PrintStudentsInGroup(groupName);
                    break;
                case 4: // Выйти за дверь
                    Console.WriteLine("Выход из программы.");
                    return;
                default:
                    Console.WriteLine("Недопустимое действие.");
                    break;
            }
        }

    }
}
